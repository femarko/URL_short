from typing import Callable

import src.shortener_app.domain.errors as domain_errors
from src.shortener_app.infrastructure.orm_tool.init_orm_tool import get_initialized_orm_tool
from src.shortener_app.infrastructure.repository import URLRepository
from src.shortener_app.domain.protocols import RepoProto

orm_tool = get_initialized_orm_tool()


class UnitOfWork:
    """
    Unit of Work pattern implementation for managing database operations
    within a consistent session context.

    This class manages the lifecycle of a single database session and provides
    access to the associated repository. It is designed to be used as an
    asynchronous context manager. Within the context block, the caller can
    perform multiple operations using the repository. Changes must be
    explicitly committed, otherwise they will be discarded on exit.

    Example:
        async with UnitOfWork() as uow:
            uow.url_repo.add_url(...)
            await uow.commit()
    """
    def __init__(self, session_maker: Callable = orm_tool.session_maker):
        """
        Initializes a UnitOfWork instance.

        :param session_maker: Callable that returns a new session instance.
        :type session_maker: Callable
        """
        self.session_maker = session_maker

    async def __aenter__(self) -> "UnitOfWork":
        """
        Enters the asynchronous context and creates a new session.

        A session is instantiated using the session maker, and the
        URLRepository is initialized with this session. The session
        supports transactional operations, but transactions must be
        managed explicitly by calling commit or rollback.

        :return: An instance of :class:`UnitOfWork`.
        :rtype: UnitOfWork
        """
        self.session: orm_tool.asyncsession = self.session_maker()
        self.url_repo: RepoProto = URLRepository(session=self.session)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """
        Exits the asynchronous context and performs cleanup.

        If an exception occurred during the context block, a rollback
        is triggered to undo pending changes. Regardless of success or
        failure, the session is always closed at the end.

        :param exc_type: The exception type, if any.
        :param exc_val: The exception instance, if any.
        :param exc_tb: The traceback object, if any.
        """
        if exc_type is not None:
            await self.rollback()
        await self.session.close()

    async def rollback(self):
        """
        Rolls back the current transaction.

        Typically used to undo operations after an error or failed validation.
        This method is automatically called on context exit if an exception
        was raised.
        """
        await self.session.rollback()

    async def commit(self):
        """
        Commits the current transaction.

        Persists all changes made during the session. Must be called
        explicitly before exiting the context. If a database integrity
        error occurs (e.g. duplicate key), a domain-specific
        AlreadyExistsError is raised.

        :raises domain_errors.AlreadyExistsError: On integrity violation.
        """
        try:
            await self.session.commit()
        except orm_tool.integrity_error:
            raise domain_errors.AlreadyExistsError

    async def flush(self):
        """
        Flushes pending changes to the database without committing.

        This pushes changes to the database to perform checks or
        generate autogenerated values, but does not persist them.
        Useful for intermediate validation.

        :raises domain_errors.AlreadyExistsError: On integrity violation.
        """
        try:
            await self.session.flush()
        except orm_tool.integrity_error:
            raise domain_errors.AlreadyExistsError
